@using System.Threading

@page "/demo/lifecycle"
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Lifecycle</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<p><button class="btn btn-primary" @onclick="IncrementCount">Click me</button></p>
<br />
@Count <button class="btn btn-secondary" @onclick="StartCountdown">Start Countdown</button>

<div class="border">
    <LifecycleChild CountValue="@currentCount" />
</div>

@foreach (var item in EventType)
{
    @item
    <hr />
}

@code {
    private int currentCount = 0;
    List<string> EventType = new List<string>();
    private int Count { get; set; } = 5;

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override void OnInitialized()
    {
        // executed when the component is completely loaded
        EventType.Add("OnInitialized is called");
    }

    @* protected override async Task OnInitializedAsync()
{
await Task.Delay(1000);
EventType.Add("OnInitializedAsync is called");
} *@

    protected override void OnParametersSet()
    {
        // executed when a component is first initialized, and each time
        // one of its parameters changes thereafter
        EventType.Add("OnParametersSet is called");

    }

    @* protected override async Task OnParametersSetAsync()
{
await Task.Delay(1000);
EventType.Add("OnParametersSetAsync is called");
} *@

    protected override void OnAfterRender(bool firstRender)
    {
        // executed after the component is rendered
        if (firstRender)
        {
            currentCount = 111;
        }
        else
        {
            currentCount = 999;
        }

        EventType.Add("OnAfterRender is called");
    }

    @* protected override async Task OnAfterRenderAsync(bool firstRender)
{
await Task.Delay(1000);

EventType.Add("OnAfterRenderAsync is called");
} *@

    protected override bool ShouldRender()
    {
        // UI is refreshed if this value returens true
        EventType.Add("ShouldRender is called");
        return true;
    }

    // HasStateChanged
    private void StartCountdown()
    {
        var timer = new Timer(TimeCallBack, null, 1000, 1000);
    }

    private void TimeCallBack(object state)
    {
        if (Count > 0)
        {
            Count--;
            InvokeAsync(StateHasChanged);
        }
    }
}