@page "/category/create"
@page "/category/edit/{entityId:int}"

@inject IUnitOfWork _uow
@inject NavigationManager _nm

<div class="row my-2">
    <h3 class="card-title text -primary mb-3 ml-3">@Title Category</h3>
    <div class="col-10">
        <EditForm Model="@CreateCategoryDto" OnValidSubmit="@Upsert" FormName="CategoryUpsert">
            <DataAnnotationsValidator />
            @* <ValidationSummary /> *@
            <div class="form-group">
                <label>
                    Name:
                    <InputText @bind-Value="CreateCategoryDto.Name" class="form-control" />
                    <ValidationMessage For="()=>CreateCategoryDto.Name"></ValidationMessage>
                </label>
            </div>
            <div class="form-group py-2"><button type="submit" class="btn btn-primary">@Title</button>
                <NavLink href="/category" class="btn btn-secondary">Back to Categories</NavLink>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public int entityId { get; set; }

    [SupplyParameterFromForm]
    private CreateCategoryDto CreateCategoryDto { get; set; } = new();
    private string Title { get; set; } = "Create";

    protected override void OnInitialized() => CreateCategoryDto ??= new();

    private async Task Upsert()
    {
        await _uow.Categories.ExecuteSqlAsync(@"
INSERT INTO categories (Name)
VALUES (@Name)
ON CONFLICT(Id) DO UPDATE SET
Name = EXCLUDED.Name;"
        , [new SqliteParameter("Name", CreateCategoryDto.Name)]);

        _nm.NavigateTo("/category");
    }
}