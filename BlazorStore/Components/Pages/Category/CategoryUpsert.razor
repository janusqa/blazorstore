@page "/category/create"
@page "/category/edit/{entityId:int}"
@attribute [StreamRendering]

@inject IUnitOfWork _uow
@inject NavigationManager _nm

<div class="row my-2">
    <h3 class="card-title text -primary mb-3 ml-3">@Title Category</h3>
    <div class="col-10">
        @if (entityId != 0 && CategoryDto is null)
        {
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
        else if (CategoryDto is not null)
        {
            <EditForm Model="CategoryDto" OnValidSubmit="Upsert" FormName="category-upsert" method="POST">
                <DataAnnotationsValidator />
                @* <ValidationSummary /> *@
                <div class="form-group">
                    <label>
                        Name:
                        <InputText @bind-Value="CategoryDto.Name" class="form-control" />
                        <ValidationMessage For="()=>CategoryDto.Name"></ValidationMessage>
                    </label>
                </div>
                <div class="form-group py-2"><button type="submit" class="btn btn-primary">@Title</button>
                    <NavLink href="/category" class="btn btn-secondary">Back to categories</NavLink>
                </div>
            </EditForm>
            <div>@message</div>
        }
    </div>
</div>

@code {

    private string? message;

    [Parameter]
    public int entityId { get; set; }

    [SupplyParameterFromForm(FormName = "category-upsert")]
    public CategoryDto CategoryDto { get; set; } = new();

    private string Title { get; set; } = "Create";

    protected override void OnInitialized()
    {
        if (entityId != 0)
        {
            Title = "Update";
        }
        else
        {
            Title = "Create";
        }
    }
    protected override async Task OnParametersSetAsync()
    {
        if (entityId != 0)
        {
            var category = await Get(entityId);
            if (category is not null)
            {
                CategoryDto.Name ??= category.Name;
            }
        }
    }

    private async Task Upsert()
    {
        if (CategoryDto is not null)
        {
            message = "Saving...";

            await _uow.Categories.ExecuteSqlAsync(@"
INSERT INTO categories (Id, Name)
VALUES (@Id, @Name)
ON CONFLICT(Id) DO UPDATE SET
Name = EXCLUDED.Name;"
            , [
            new SqliteParameter("Name", CategoryDto.Name),
new SqliteParameter("Id",entityId !=0 ? entityId : (object)DBNull.Value),
            ]);

            message = "Saved!";

            _nm.NavigateTo("/category");
        }
        else
        {
            message = "Something went wrong!";
        }
    }

    private async Task<CategoryDto?> Get(int entityId)
    {
        return (await _uow.Categories
        .FromSqlAsync(@"SELECT * FROM Categories WHERE Id = @Id;", [new SqliteParameter("Id", entityId)]))
        .Select(c => c.ToDto()).FirstOrDefault();
    }
}