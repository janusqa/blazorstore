@page "/order/{EntityId:int}"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [Authorize(Roles = SD.Role_Admin)]

@inject IOrderService _orderService
@inject IJSRuntime _ijsr

@if (Order is null)
{
    <div class="text-center">
    <img src="/images/loading.gif">
</div>
}
else
{
    <div class="container">
    <div class="card">
        <div class="card-header bg-dark text-light ml-0">
            <div class="container row">
                <div class="col-12 d-none d-md-block col-md-6 pb-1">
                    <i class="fas fa-shopping-cart"></i> &nbsp; Order Summary
                </div>
                <div class="col-12 col-md-4 offset-md-2 text-right">
                    <a href="/order" class="btn btn-outline-info form-control btn-sm">Back to Orders</a>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="container rounded p-2">
                <div class="row">
                    <div class="col-12 col-lg-6 pb-4">
                        <EditForm Model="Order.OrderHeader" OnValidSubmit="UpdateOrder" FormName="order-details"
                            method="POST">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger" role="alert" />
                            <div class="row">
                                <h4 class="d-flex justify-content-between align-items-center mb-3">
                                    <span class="text-primary">Customer Details:</span>
                                </h4>
                            </div>
                            <div class="row my-1">
                                <div class="col-3">Name</div>
                                <div class="col-9">
                                    <InputText @bind-Value="Order.OrderHeader.Name" class="form-control" />
                                    <ValidationMessage For="() => Order.OrderHeader.Name" />
                                </div>
                            </div>
                            <div class="row my-1">
                                <div class="col-3">Email</div>
                                <div class="col-9">
                                    <InputText @bind-Value="Order.OrderHeader.Email" readonly class="form-control" />
                                    <ValidationMessage For="() => Order.OrderHeader.Email" />
                                </div>
                            </div>
                            <div class="row my-1">
                                <div class="col-3">Phone</div>
                                <div class="col-9">
                                    <InputText @bind-Value="Order.OrderHeader.PhoneNumber" class="form-control" />
                                    <ValidationMessage For="() => Order.OrderHeader.PhoneNumber" />
                                </div>
                            </div>
                            <div class="row my-1">
                                <div class="col-3">Address</div>
                                <div class="col-9">
                                    <InputText @bind-Value="Order.OrderHeader.StreetAddress" class="form-control" />
                                    <ValidationMessage For="() => Order.OrderHeader.StreetAddress" />
                                </div>
                            </div>
                            <div class="row my-1">
                                <div class="col-3">City</div>
                                <div class="col-9">
                                    <InputText @bind-Value="Order.OrderHeader.City" class="form-control" />
                                    <ValidationMessage For="() => Order.OrderHeader.City" />
                                </div>
                            </div>
                            <div class="row my-1">
                                <div class="col-3">State</div>
                                <div class="col-9">
                                    <InputText @bind-Value="Order.OrderHeader.State" class="form-control" />
                                    <ValidationMessage For="() => Order.OrderHeader.State" />
                                </div>
                            </div>
                            <div class="row my-1">
                                <div class="col-3">Zip Code</div>
                                <div class="col-9">
                                    <InputText @bind-Value="Order.OrderHeader.PostalCode" class="form-control" />
                                    <ValidationMessage For="() => Order.OrderHeader.PostalCode" />
                                </div>
                            </div>
                            <div class="row my-1">
                                <div class="col-3">Order Date</div>
                                <div class="col-9">
                                    <InputDate @bind-Value="Order.OrderHeader.OrderDate" readonly
                                        class="form-control" />
                                    <ValidationMessage For="() => Order.OrderHeader.OrderDate" />
                                </div>
                            </div>
                            <div class="row my-1">
                                <div class="col-3">Carrier</div>
                                <div class="col-9">
                                    <InputText @bind-Value="Order.OrderHeader.Carrier" class="form-control" />
                                    <ValidationMessage For="() => Order.OrderHeader.Carrier" />
                                </div>
                            </div>
                            <div class="row my-1">
                                <div class="col-3">Tracking</div>
                                <div class="col-9">
                                    <InputText @bind-Value="Order.OrderHeader.Tracking" class="form-control" />
                                    <ValidationMessage For="() => Order.OrderHeader.Tracking" />
                                </div>
                            </div>
                            @if (Order.OrderHeader.Status != SD.OrderStatusApproved && Order.OrderHeader.Status !=
                               SD.OrderStatusPending)
                                {
                                    <div class="row my-1">
                                        <div class="col-3">Shipping Date</div>
                                        <div class="col-9">
                                            <InputDate @bind-Value="Order.OrderHeader.ShippingDate" class="form-control" />
                                            <ValidationMessage For="() => Order.OrderHeader.ShippingDate" />
                                        </div>
                                    </div>
                                }
                                <div class="row my-1">
                                    <div class="col-3">Session ID</div>
                                    <div class="col-9">
                                        <InputText @bind-Value="Order.OrderHeader.SessionId" readonly
                                            class="form-control" />
                                        <ValidationMessage For="() => Order.OrderHeader.SessionId" />
                                    </div>
                                </div>
                                <div class="row my-1">
                                    <div class="col-3">Order Status</div>
                                    <div class="col-9">
                                        <InputText @bind-Value="Order.OrderHeader.Status" readonly class="form-control" />
                                        <ValidationMessage For="() => Order.OrderHeader.Status" />
                                    </div>
                                </div>
                                @if (Order.OrderHeader.Status == SD.OrderStatusApproved)
                                {
                                    <button type="submit" class="btn btn-warning form-control my-1">Update Order
                                        Details</button>
                                }
                            </EditForm>
                        </div>
                        <div class="col-12 col-lg-5 offset-lg-1">
                            <h4 class="d-flex justify-content-between align-items-center mb-3">
                                <span class="text-primary">Order Summary</span>
                            </h4>
                            <ul class="list-group mb-3">
                                @foreach (var item in Order.OrderDetails)
                                {
                                    <li class="list-group-item d-flex justify-content-between p-2">
                                        <div class="row container">
                                            <div class="col-8">
                                                <h6 class="my-0 text-primary">@item.ProductName</h6>
                                                <small class="text-muted">Price : @item.Price.ToString("c")</small><br />
                                                <small class="text-muted">Quantity : @item.Count</small>
                                            </div>
                                            <div class="col-4 text-end">
                                                <p class="text-success">@((item.Count * item.Price).ToString("c"))</p>
                                            </div>
                                        </div>
                                    </li>
                                }
                                <li class="list-group-item bg-info">
                                    <div class="row container">
                                        <div class="col-6">
                                            <h5 class="text-white">TOTAL </h5>
                                        </div>
                                        <div class="col-6 text-end">
                                            <h5 class="text-white">@Order.OrderHeader.OrderTotal.ToString("c")</h5>
                                        </div>
                                    </div>
                                </li>
                            </ul>
                            @if (Order.OrderHeader.Status == SD.OrderStatusApproved)
                            {
                                <button @onclick="ShipOrder" class="btn btn-success form-control my-1">Ship Order</button>
                            }
                            @if (Order.OrderHeader.Status == SD.OrderStatusApproved || Order.OrderHeader.Status ==
                           SD.OrderStatusPending)
                            {
                                <button class="btn btn-danger form-control my-1">Cancel Order</button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

}

@code {
    [Parameter]
    public int EntityId { get; set; }
    [SupplyParameterFromForm(FormName = "order-details")]
    private OrderDto? Order { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (EntityId > 0)
        {
            Order ??= await _orderService.Get(EntityId);
        }
        else
        {
            Order ??= new();
        }
    }

    private async Task UpdateOrder()
    {
        try
        {
            if (Order is not null && Order.OrderHeader is not null)
            {
                var orderHeader = await _orderService.UpdateOrderDetails(Order.OrderHeader);
                if (orderHeader is not null)
                {
                    Order = Order with { OrderHeader = orderHeader };
                    await _ijsr.InvokeVoidAsync("blazorInterop.ShowToastr", "success", "Updated successfully");
                }
            }
        }
        catch (Exception ex)
        {
            await _ijsr.InvokeVoidAsync("blazorInterop.ShowToastr", "error", ex.Message);
        }
    }

    private async Task ShipOrder()
    {
        try
        {
            if (
            Order is not null &&
            Order.OrderHeader is not null &&
            !string.IsNullOrWhiteSpace(Order.OrderHeader.Tracking) &&
            !string.IsNullOrWhiteSpace(Order.OrderHeader.Carrier)
            )
            {
                var success = await _orderService.UpdateOrderStatus(Order.OrderHeader.Id, SD.OrderStatusShipped);
                if (success)
                {
                    await _ijsr.InvokeVoidAsync("blazorInterop.ShowToastr", "success", "Order Shipped");
                } else {
                    await _ijsr.InvokeVoidAsync("blazorInterop.ShowToastr", "error", "Something went wrong");
                }
            } else {
                await _ijsr.InvokeVoidAsync("blazorInterop.ShowToastr", "error", "Check Order details. Ensure that Carrier and Tracking are set if attempting to ship an order");
            }
        }
        catch (Exception ex)
        {
            await _ijsr.InvokeVoidAsync("blazorInterop.ShowToastr", "error", ex.Message);
        }
    }

}