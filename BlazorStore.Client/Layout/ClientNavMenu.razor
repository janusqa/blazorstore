@implements IDisposable
@inject IState<AppState.Cart.CartState> cartState

<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/">BlazorStore</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item p-0">
                    <NavLink class="nav-link" href="/cart"><span class="p-2"><i class="bi bi-cart"></i>
                            (@cartState.Value.Cart.Count)</span>
                    </NavLink>
                </li>
            </ul>
            <LoginMenu />
        </div>
    </div>
</nav>

@code {
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            cartState.StateChanged += AppStateHasChanged;
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        StateHasChanged();
    }

    private void AppStateHasChanged(object? sender, EventArgs args)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        cartState.StateChanged -= AppStateHasChanged;
    }
}