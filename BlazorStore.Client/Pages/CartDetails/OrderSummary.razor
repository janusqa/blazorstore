@page "/summary"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))
@attribute [Authorize]

@* Fluxor Plumbing *@
@implements IDisposable
@inject IState<AppState.Cart.CartState> CartState
@inject IState<AppState.Auth.AuthState> AuthState
@inject IDispatcher _dispatcher

@inject IJSRuntime _jsruntime
@inject IConfiguration _config
@inject IApiService _api

@if (AuthState.Value.UserInfo is null || CartState.Value.IsLoading)
{
    <div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
    <img src="images/ajax-loader.gif" alt="Loading..." />
</div>
}
else
{
    <div class="mt-4 mx-4 px-md-5 mx-md-5 p-1">
    <div class="row p-2 my-3">
        <div class="col-12 col-lg-7 p-4">
            <div class="row px-2 text-success ">
                <div class="col-8 py-1">
                    <p style="font-size:x-large;margin:0px;">Order Summary</p>
                </div>
                <div class="col-4 p-0" style="text-align:right">
                    <a href="/cart" class="btn btn-secondary btn-block">Back to cart</a>
                </div>
            </div>
            @foreach (var item in Order.OrderDetails)
                {
                    <div class="row border p-1 m-1">

                        <div class="col-3 col-md-2 ">
                            <img src="@($"{baseImageUrl}{item.Product?.ImageUrl}")" width="100%" alt="@item.ProductName">
                        </div>
                        <div class="col-5 col-md-5 ">
                            <span class="">Product : @item.ProductName </span><br />
                            <span class="pt-1">Size : @item.Size</span><br />
                            <span class="pt-1">Count : @item.Count</span><br />

                        </div>
                        <div class="col-4 col-md-5 " style="text-align:right;">
                            <h4 class="text-warning font-weight-bold pt-2">
                                USD
                                <span style="border-bottom:1px solid #ff6a00">
                                    @((item.Count * item.Price).ToString("c"))
                                </span>
                            </h4>
                        </div>
                    </div>
                }
                <div class="row" style="text-align:right">
                    <div class="col-12 px-3">
                        <h3> Order Total : <span class="text-secondary">@(Order.OrderDetails.Sum(od => od.Count *
                            od.Price).ToString("c"))</span> </h3>
                    </div>
                </div>
            </div>

            <div class="col-12 col-lg-5 p-4 ml-4 ml-md-0 mt-4 mt-md-0 border">
                <EditForm Model="Order.OrderHeader" OnValidSubmit="Checkout" FormName="checkout" method="POST">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="row px-2 text-success border-bottom">
                        <div class="col-7 py-1">
                            <p style="font-size:x-large;margin:0px;">Enter Details</p>
                        </div>
                    </div>

                    <div class="form-group pt-2">
                        <label class="text-warning">Name</label>
                        <InputText @bind-Value="Order.OrderHeader.Name" class="form-control" />
                        <ValidationMessage For="() => Order.OrderHeader.Name" />
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Phone</label>
                        <InputText @bind-Value="Order.OrderHeader.PhoneNumber" class="form-control" />
                        <ValidationMessage For="() => Order.OrderHeader.PhoneNumber" />
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Email</label>
                        <InputText @bind-Value="Order.OrderHeader.Email" class="form-control" />
                        <ValidationMessage For="() => Order.OrderHeader.Email" />
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Street Address</label>
                        <InputText @bind-Value="Order.OrderHeader.StreetAddress" class="form-control" />
                        <ValidationMessage For="() => Order.OrderHeader.StreetAddress" />
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">City</label>
                        <InputText @bind-Value="Order.OrderHeader.City" class="form-control" />
                        <ValidationMessage For="() => Order.OrderHeader.City" />
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">State</label>
                        <InputText @bind-Value="Order.OrderHeader.State" class="form-control" />
                        <ValidationMessage For="() => Order.OrderHeader.State" />
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Postal Code</label>
                        <InputText @bind-Value="Order.OrderHeader.PostalCode" class="form-control" />
                        <ValidationMessage For="() => Order.OrderHeader.PostalCode" />
                    </div>


                    <div class="form-group pt-2">
                        <button type="submit" class="btn btn-success form-control">Checkout Now</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    [SupplyParameterFromForm(FormName = "checkout")]
    private OrderDto Order { get; set; } = new OrderDto();
    private string? baseImageUrl => _config.GetSection("AppUrls:BaseServerUrl").Value!;

    // Alternative method to check if user is Authtenticated
    [CascadingParameter]
    public Task<AuthenticationState>? authenticationState { get; set; }

    private int UserInfoInitilized;

    protected override async Task OnInitializedAsync()
    {
        if (AuthState.Value.UserInfo is null) await GetUserInfo();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // we are in a strange situation here. We need to fetch userinfo and populate the form after we
        // recieve this info. The best place so far to to this is in the OnafterRender hook. We need
        // to check this is the first time UserInfo is set and that it is not null and indicate a state change
        // since this is all set AFTER the page has renedred and we need to finally re-render to display it in
        // the ui.
        UserInfoInitilized = AuthState.Value.UserInfo is not null ? ++UserInfoInitilized : UserInfoInitilized;
        if (AuthState.Value.UserInfo is not null && UserInfoInitilized == 1)
        {
            GetOrder();
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task Checkout()
    {
        try
        {
            var response = await _api.Orders.AddAsync(new ApiRequest { Data = Order });

            if (response is not null && response.IsSuccess)
            {
                var order = JsonSerializer.Deserialize<OrderDto>(JsonSerializer.Serialize(response.Result));
                await _jsruntime.InvokeVoidAsync("blazorInterop.StripeRedirect", order?.PaymentUrl);

                @* if (order is not null) _dispatcher.Dispatch(new AppState.Cart.CartRemoved()); *@
            }
            else
            {
                throw new Exception(string.Join(" | ", response?.ErrorMessages ?? []));
            }
        }
        catch (Exception ex)
        {
            await _jsruntime.InvokeVoidAsync("blazorInterop.ShowToastr", "error", ex.Message);
        }
    }

    private void GetOrder()
    {
        Order.OrderDetails = CartState.Value.Cart.Select(c => new OrderDetailDto
            {
                ProductId = c.Value.ProductId,
                Price = c.Value.ProductPrice.Price,
                Size = c.Value.ProductPrice.Size,
                Count = c.Value.Count,
                ProductName = c.Value.Product.Name,
                Product = c.Value.Product
            }).ToList();

        Order.OrderHeader = Order.OrderHeader with
            {
                OrderTotal = CartState.Value.Cart.Sum(c => c.Value.Count * c.Value.ProductPrice.Price),
                UserId = AuthState.Value.UserInfo?.UserName ?? string.Empty,
                Email = AuthState.Value.UserInfo?.Email ?? string.Empty,
                Name = AuthState.Value.UserInfo?.Name ?? string.Empty,
                PhoneNumber = AuthState.Value.UserInfo?.PhoneNumber ?? string.Empty,
                StreetAddress = string.Empty,
                State = string.Empty,
                City = string.Empty,
                PostalCode = string.Empty,
                Status = SD.OrderStatusPending
            };
    }

    private async Task GetUserInfo()
    {
        // Alternative method to check if user is Authtenticated
        var authState = authenticationState is not null ? await authenticationState : null;
        var user = authState?.User;
        if (user?.Identity is not null && user.Identity.IsAuthenticated)
        {
            _dispatcher.Dispatch(new AppState.Auth.UserInfoFetched());
        }
    }

    // Fluxor Plumbing
    protected override void OnInitialized()
    {
        CartState.StateChanged += AppStateHasChanged;
        AuthState.StateChanged += AppStateHasChanged;
    }

    private void AppStateHasChanged(object? sender, EventArgs args)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        CartState.StateChanged -= AppStateHasChanged;
        AuthState.StateChanged -= AppStateHasChanged;
    }
}