@page "/details/{entityId:int}"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))

@* Fluxor Plumbing *@
@implements IDisposable
@inject IState<AppState.Cart.CartState> CartState
@inject IDispatcher dispatcher

@inject IApiService _api
@inject IConfiguration _config
@inject IJSRuntime _jsruntime

<h2>Details</h2>

@if (Product is null)
{
    <div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
    <img src="images/ajax-loader.gif" alt="Loading..." />
</div>
}
else
{
    <EditForm Model="CartItem" OnValidSubmit="AddToCart" FormName="add-to-cart" method="POST">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />
    <div class="card container mt-4">
        <div class="card-header ml-0  row">
            <div class="col-12 col-md-6">
                <h1 class="text-primary">@Product.Name</h1>
            </div>

            <div class="col-12 col-md-6 text-end pt-4">
                <span class="badge bg-info pt-2" style="height:30px;">@Product.CategoryDto?.Name</span>
                <span class="badge bg-warning pt-2" style="height:30px;">@Product.Color</span>
            </div>
        </div>
        <div class="card-body">
            <div class="container rounded p-2">
                <div class="row">
                    <div class="col-10">
                        <p>@((MarkupString)Product.Description)</p>
                        <div class="row">
                            @if (Product.ProductPrices is not null && Product.ProductPrices.Count > 0)
                                {
                                    @foreach (var productPrice in Product.ProductPrices)
                                    {
                                        @if (productPrice.Id == CartItem.ProductPriceId)
                                        {
                                            <div class="col-2 bg-light text-center pt-2 m-2"
                                                style="cursor: pointer; border:3px solid #28A745; border-radius:10px;box-shadow:5px">
                                                <p>@productPrice.Size</p>
                                                <p>@productPrice.Price.ToString("c")</p>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="col-2 bg-light text-center pt-2 m-2"
                                                style="cursor: pointer;border:1px solid; border-radius:10px;box-shadow:5px"
                                                @onclick="(args) => SelectedProductPrice(args, productPrice.Id)">
                                                <p>@productPrice.Size</p>
                                                <p>@productPrice.Price.ToString("c")</p>
                                            </div>
                                        }
                                    }
                                }
                                else
                                {
                                    <p class="text-warning">No sizes available yet...</p>
                                }
                                <div class="row pl-2">
                                    <div class="col-2 text-primary">
                                        <h4>Count</h4>
                                    </div>
                                    <div class="col-10">
                                        <InputNumber @bind-Value="CartItem.Count" class="form-control" />
                                        <ValidationMessage For="() => CartItem.Count" />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-2">
                            <img src="@($"{baseImageUrl}{Product.ImageUrl}")" width="100%" class="rounded"
                                alt="@Product.Name" />
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <div class="row">
                        <div class="col-12 col-md-6 pb-1">
                            <a class="btn btn-success form-control " href="/">Back to Home</a>
                        </div>
                        <div class="col-12 col-md-6 pb-1">
                            @if (CartItem.ProductPriceId > 0)
                            {
                                <button type="submit" value="Add to Cart" class="btn btn-primary form-control">
                                    Add to Cart
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@* <BlazorStore.Client.Components.ToastrNotification ToastType="success" ToastMessage="Hello"/> *@

@code {
    [Parameter] public int EntityId { get; set; }
    private string? baseImageUrl;
    private ProductDto? Product { get; set; }
    [SupplyParameterFromForm(FormName = "add-to-cart")]
    private CartItemDto CartItem { get; set; } = new CartItemDto { };

    protected override void OnInitialized()
    {
        baseImageUrl = _config.GetSection("AppUrls:BaseServerUrl").Value!;
    }

    protected override async Task OnParametersSetAsync()
    {
        var response = await _api.Products.GetAsync(EntityId, new ApiRequest());
        if (response is not null && response.IsSuccess)
        {
            Product = JsonSerializer.Deserialize<ProductDto>(JsonSerializer.Serialize(response.Result));
        }
    }

    private void SelectedProductPrice(MouseEventArgs e, int productPriceId)
    {
        var productPrice = Product?.ProductPrices?.FirstOrDefault(pp => pp.Id == productPriceId);
        if (productPrice is not null && Product is not null)
        {
            CartItem.ProductPrice = productPrice;
            CartItem.ProductPriceId = productPriceId;
            CartItem.Product = Product;
            CartItem.ProductId = Product.Id;
        }
    }

    private void AddToCart()
    {
        dispatcher.Dispatch(new AppState.Cart.ItemUpserted(CartItem));
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    // if (!CartState.Value.Updating && CartState.Value.Updated)
    // {
    // await _jsruntime.InvokeVoidAsync("blazorInterop.ShowToastr", "success", "Cart updated");
    // }
    // }

    // Fluxor Plumbing
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            CartState.StateChanged += AppStateHasChanged;
        }
    }

    private void AppStateHasChanged(object? sender, EventArgs args)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        CartState.StateChanged -= AppStateHasChanged;
    }
}